<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Js on CayChance の Blog</title>
    <link>https://caychance.github.io/tags/js/</link>
    <description>Recent content in Js on CayChance の Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 26 Feb 2019 17:10:20 +0000</lastBuildDate>
    
	<atom:link href="https://caychance.github.io/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>原型与原型链</title>
      <link>https://caychance.github.io/posts/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
      <pubDate>Tue, 26 Feb 2019 17:10:20 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
      <description>原型  每个函数都有一个特殊的属性叫作原型（prototype） 每个实例对象（object）都有一个私有属性（称之为__proto__）指向它的原型对象（prototype） 该原型对象也有一个自己的原型对象(__proto__) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。  构造函数，原型和实例三者之间的关系
function Father(){}; var f = new Father(); Father.prototype === f.__proto__ //true Father.prototype.constructor === Father //true  原型链  原型链的最顶端是null 所有的原型的_proto_都是Object的原型 所有的构造函数的_proto_都是Function的原型 Function的_proto_和prototype都是Function的原型  Object.prototype.__proto__ //null 1 Function.prototype === Function.__proto__ //true 4 Object.__proto__.__proto__ === Object.prototype //true Function.__proto__.__proto__ === Object.prototype //true function Father(){} Father.__proto__ === Function.prototype //true 3 Father.prototype.__proto__ === Object.prototype //true 2 String.__proto__ === Function.prototype //true 3 String.prototype.__proto__ === Object.prototype //true 2  后记 理解，每个函数（构造函数，或者普通函数）都有一个属性叫做原型（prototype）, 每个实例对象都有一个私有属性（__proto__），每个实例对象之间的__proto__指向就是原型链。</description>
    </item>
    
    <item>
      <title>js继承方法总结</title>
      <link>https://caychance.github.io/posts/js%E7%BB%A7%E6%89%BF%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 13 Dec 2018 20:31:20 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/js%E7%BB%A7%E6%89%BF%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>js继承方法  原型链继承 借用构造函数继承 组合继承 原型式继承 寄生式继承 寄生组合式继承 混入方式继承多个对象 ES6类继承extends 总结  原型链继承 构造函数、原型和实例之间的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个原型对象的指针。
 继承的本质就是复制，即重写原型对象，代之以一个新类型的实例。
 function Father() { this.property = true; } Father.prototype.getSuperValue = function() { return this.property; } function Son() { this.sonProperty = false; } // 这里是关键，创建Father的实例，并将该实例赋值给Son.prototype Son.prototype = new Father(); Son.prototype.getSubValue = function() { return this.sonProperty; } var instance = new Son(); console.log(instance.getSuperValue()); // true  原型链方案存在的缺点：
 多个实例对引用类型的操作会被篡改。  function Father(){ this.colors = [&amp;#34;red&amp;#34;, &amp;#34;blue&amp;#34;, &amp;#34;green&amp;#34;]; } function Son(){} Son.</description>
    </item>
    
    <item>
      <title>js event loop</title>
      <link>https://caychance.github.io/posts/js-event-loop/</link>
      <pubDate>Thu, 06 Dec 2018 15:45:40 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/js-event-loop/</guid>
      <description>JavaScript是单线程的，这与它的用途有关。
为什么JavaScript是单线程的？ 假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？
任务分类 同步任务和异步任务 因为JavaScript是单线程的，如果加载一个图片，需要很久，那么网页就会阻塞。因此，从广义上来讲任务分为两类：
 同步任务   同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务
  异步任务   异步任务指的是，不进入主线程、而进入&amp;rdquo;任务队列&amp;rdquo;（task queue）的任务，只有&amp;rdquo;任务队列&amp;rdquo;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。
 执行顺序：
（1）所有同步任务都在主线程上执行，形成一个执行栈。 （2）主线程之外，还存在一个&amp;quot;任务队列&amp;quot;（task queue）。只要异步任务有了运行结果，就在&amp;quot;任务队列&amp;quot;之中放置一个事件。 （3）一旦&amp;quot;执行栈&amp;quot;中的所有同步任务执行完毕，系统就会读取&amp;quot;任务队列&amp;quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。 （4）主线程不断重复上面的第三步。  宏任务和微任务 对任务进行更精细的定义的话，也可以分为两类：
 宏任务（macro-task）    包括整体代码script、setTimeout、setInterval、setImmediate、requestAnimationFrame、I/O、UI Rendering
  微任务（micro-task）   new Promise().then(回调)、Process.nextTick、Object.observe、MutationObserver
 浏览器中的Event Loop 执行顺序：
1.当某个宏任务执行完后,会查看是否有微任务队列。 2-1.如果有，先执行微任务队列中的所有任务， 2-2.如果没有，会读取宏任务队列中排在最前的任务， 3.执行宏任务的过程中，遇到微任务，依次加入微任务队列。 4.栈空后，再次读取微任务队列里的任务，依次类推。  Node中的Event Loop Node中的Event Loop不同于浏览器。Node运行机制如下：
 V8引擎解析JavaScript脚本。 解析后的代码，调用Node API。 libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。 V8引擎再将结果返回给用户。  其中libuv引擎中的事件循环分为6个阶段，它们会按照顺序反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。
node中的事件循环的顺序：
外部输入数据&amp;ndash;&amp;gt;轮询阶段(poll)&amp;ndash;&amp;gt;检查阶段(check)&amp;ndash;&amp;gt;关闭事件回调阶段(close callback)&amp;ndash;&amp;gt;定时器检测阶段(timer)&amp;ndash;&amp;gt;I/O事件回调阶段(I/O callbacks)&amp;ndash;&amp;gt;闲置阶段(idle, prepare)&amp;ndash;&amp;gt;轮询阶段（按照该顺序反复运行）</description>
    </item>
    
    <item>
      <title>异步编程的前世今生</title>
      <link>https://caychance.github.io/posts/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A/</link>
      <pubDate>Tue, 27 Nov 2018 18:20:25 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A/</guid>
      <description>问题起源  因为JS只有一根线程，因此异步编程对JS很重要。  目的  异步编程的语法目标，就是怎样让它更像同步编程。  很久很久以前 异步编程的方法有四种：
 回调函数； 事件监听； 发布/订阅； Promise对象。  回调函数的故事：  概念 JS对异步编程的实现就是回调函数。所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。 局限性 回调函数本身没有问题，但是多个回调函数嵌套的时候就会有问题。会导致代码横向发展，而不是纵向发展。称之为回调地狱。 解决之道 为了解决该问题，Promise诞生了，它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载改为纵向加载。 改进的地方 Promise 的写法只是回调函数的改进，使用then方法以后，异步任务的两段执行看得更清楚了，除此以外，并无新意。 新面临的问题 然后，Promise也面临一个巨大的问题，代码冗余，原来的任务被Promise包装一下，一眼看去都是一堆then，语义变的不清楚。   协程的故事  概念 传统的编程语言，早有异步编程的解决方案（其实是多任务的解决方案）。其中有一种叫做&amp;rdquo;协程&amp;rdquo;（coroutine），意思是多个线程互相协作，完成异步任务。
 本质 协程的终极奥义就在于yield命令，它表示执行到此处，执行权将交给其他协程。即yield命令是异步两个阶段的分界线。
 协程在ES6中的衍生及其特点 于是乎，Generator函数诞生了。它是协程在ES6中的实现，其最大特点就是可以交出函数的执行权，即暂停执行。整个 Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用 yield 语句注明。
 Generator的另外两个特性 Generator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。
 函数体内外数据交换 next 方法返回值的 value 属性，是 Generator 函数向外输出数据；next 方法还可以接受参数，这是向 Generator 函数体内输入数据。
 错误处理机制 Generator 函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。
 Generator函数的局限：
 不能自动执行
 程序的执行权移出以后，需要再次交换回来。</description>
    </item>
    
  </channel>
</rss>