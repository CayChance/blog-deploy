<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>跨域 on CayChance の Blog</title>
    <link>https://caychance.github.io/tags/%E8%B7%A8%E5%9F%9F/</link>
    <description>Recent content in 跨域 on CayChance の Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 11 Jul 2019 16:47:15 +0800</lastBuildDate>
    
	<atom:link href="https://caychance.github.io/tags/%E8%B7%A8%E5%9F%9F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostMessage使用</title>
      <link>https://caychance.github.io/posts/postmessage%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 11 Jul 2019 16:47:15 +0800</pubDate>
      
      <guid>https://caychance.github.io/posts/postmessage%E4%BD%BF%E7%94%A8/</guid>
      <description>跨域的问题有一种postMessage的解决方案，之前也一直是听过但是没有用过。
用法  发送消息:otherWindow.postMessage(message, targetOrigin, [transfer]); 接收消息:window.addEventListener(&amp;ldquo;message&amp;rdquo;, (event)=&amp;gt;{}, false); postMessage方法的入参:  message:要发送的数据 targetOrigin:数据接收方。设置为&amp;rsquo;*&amp;lsquo;，则不限制。不建议这么设置。 transfer:可选参数。是一串和message 同时传递的 Transferable 对象.这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。  event对象的几个属性:  data:从其他窗口发送过来的消息对象 type:发型消息的类型 source:发送消息的窗口对象 origin:发送消息的窗口的源   举个栗子🌰 下面的写了一个小demo，page one (http://10.161.114.80:8080/index.html/#/test) 和page two (http://10.161.114.80:8082/index.html/#/test)。
 page one在mounted的时候，新打开了一个窗口，然后8秒后了一条消息给page two； page one在mounted的时候，监听postMessage回来的消息；并判断如果当前发消息的窗口对象，不是当前窗口对象(window)的话，就发送一条消息给page two。 page two在mounted的时候，监听postMessage回来的消息。 page two在mounted的时候，发送一个消息给page one。  //page one &amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;h3&amp;gt;page one&amp;lt;/h3&amp;gt; &amp;lt;input v-model=&amp;#34;message&amp;#34; placeholder=&amp;#34;edit me&amp;#34; /&amp;gt; &amp;lt;button @click=&amp;#34;handleClick&amp;#34;&amp;gt;sendMessage&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { data() { return { message: &amp;#34;&amp;#34;, popup: null }; }, methods: { /** * 打开新窗口 */ openWindow() { this.</description>
    </item>
    
    <item>
      <title>跨域</title>
      <link>https://caychance.github.io/posts/%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Sun, 02 Dec 2018 22:20:50 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/%E8%B7%A8%E5%9F%9F/</guid>
      <description>由来 同源策略是浏览器安全的基石。同源指的是： - 协议相同 - 域名相同 - 端口号相同
如果非同源，有三种行为受限制：
 Cookie、LocalStorage 和 IndexDB 无法读取。 DOM无法获得。 AJAX 请求不能发送。  同源策略的限制下，浏览器可以访问到后台服务器的数据，后台服务器也会正常返回数据，只是被浏览器给拦截了。
常见的跨域方案  jsonp
 只能发送get请求，不安全。兼容性好
 CORS
 就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。
服务端设置Access-Control-Allow-Origin即可
主流跨域解决方案
 postMessage
 不是使用 Ajax 的数据通信，更多是在两个页面之间的通信。例如A、B两个页面之间。
 WebSocket
 WebSocket是一种网络通信协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯。
 nginx代理跨域
 Node中间件代理跨域
 Vue脚手架的dev环境已经默认配置好
http-proxy-middleware
proxy-middleware
  代理来解决跨域 后两种方法都属于使用代理来解决跨域的方案。 原理是：两个服务器之间是不受同源策略限制的。</description>
    </item>
    
  </channel>
</rss>