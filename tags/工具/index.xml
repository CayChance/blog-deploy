<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on CayChance の Blog</title>
    <link>https://caychance.github.io/tags/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on CayChance の Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 21 Jul 2019 20:06:14 +0800</lastBuildDate>
    
	<atom:link href="https://caychance.github.io/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>持续集成服务Travis CI</title>
      <link>https://caychance.github.io/posts/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%9C%8D%E5%8A%A1travisci/</link>
      <pubDate>Sun, 21 Jul 2019 20:06:14 +0800</pubDate>
      
      <guid>https://caychance.github.io/posts/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%9C%8D%E5%8A%A1travisci/</guid>
      <description>今天下午一直在捣鼓如何hugo的自动部署。</description>
    </item>
    
    <item>
      <title>webpack4.0学习笔记</title>
      <link>https://caychance.github.io/posts/webpack4-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 26 Apr 2019 16:21:00 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/webpack4-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description> webpack是什么 为什么要用webpack 常用的loader loader是有执行顺序的，默认的执行顺序是从右至左，从下至上执行。 loader的类型：
 前置loader pre 普通loader normal 后置loader post 内联loader  css-loader style-loader less-loader less less-loader
sass-loader node-sass sass-loader
stylus-loader stylus stylus-loader
postcss-loader postcss-loader autoprefixer
babel babel-loader @babel/core @babel/preset-env
eslint eslint-loader
expose-loader 代码中引入第三方模块，例如jquery，把jquery暴露给window
file-loder 图片打包 file-loader默认会在内部生成一张图片到build目录下，并且把生成的图片名字返回回来
常用的plugin html-webpack-plugin mini-css-extract-plugin optimize-css-assets-webpack-plugin 压缩css 并且js还需要去压缩 使用uglifyjs-webpack-plugin
webpack.ProvidePlugin 在代码中引入第三方模块，例如jquery，可以在每个模块中引入jquery
ProvidePlugin
在代码中引入第三方模块  expose-loader webpack.ProvidePlugin 引入不打包  图片如何打包  在js中引入 在css中 在html中  loader和plugin的区别 module和chunk的区别 </description>
    </item>
    
    <item>
      <title>docker学习笔记</title>
      <link>https://caychance.github.io/posts/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 06 Mar 2019 19:26:50 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>引子-环境配置的难题 软件开发最大的麻烦事之一就是环境配置。解决的思路就是软件带环境安装，即安装的时候，把原始环境一模一样的复制过来。
初始的尝试解决方案-虚拟机 虚拟机就是带环境安装的一种解决方案。
缺点:
 资源占用多 虚拟机会独占一部分内存和硬盘空间。
 冗余步骤多 虚拟机是完整的操作系统，一些系统级别的操作步骤，无法跳过。
 启动慢 启动虚拟机的时间和启动操作系统的时间一样长。
  另一种解决方案-Linux容器 由于以上缺点，Linux有另一种虚拟化技术:Linux容器。
Linux容器不是模拟一个完整的操作系统，而且对进程进行隔离。
或者说在正常的进程外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的。
由于容器是进程级别的，相比虚拟机有以下优势:
 启动快 启动进程肯定比启动操作系统快太多了。
 资源占用少 容器只占用需要的资源。另外，多个容器可以共享资源。
 体积小 容器只要包含用到的组件即可。
  结论:容器有点类似轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。
噔噔噔～主角登场-Docker是个啥 Docker属于Linux容器的一种封装，提供简单易用的容器使用接口。
Docker将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。(有了 Docker，妈妈再也不用担心环境问题。)
此外，容器还可以进行版本管理、复制、分享、修改，类似代码的管理。
Docker的用途 Docker 的主要用途，目前有三大类。
 提供一次性的环境。 比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。
 提供弹性的云服务。 因为 Docker 容器可以随开随关，很适合动态扩容和缩容。
 组建微服务架构。 通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。
  咦？Docker中的image是个啥 Docker把应用程序及其依赖，打包在image文件里面。
我们通过image文件，可以生成Docker容器。
image文件可以看作是容器的模板。Docker根据image文件生成容器的实例。同一个image文件，可以生成多个同时运行的容器实例。
image是二进制文件。image文件可以继承别的image文件，一般来讲，尽量使用别人制作好的docker，或者基于别人的image文件进行加工。
容器文件又是个啥？ image文件能够生成的容器实例，这个容器实例本身也是一个文件，称为容器文件。
所以说，一旦容器生成，会同时有两个文件:image文件和容器文件。
关闭容器，并不会删除容器文件，只是容器停止运行而已。
我也想做一个Docker容器，肿么办？ step1: 编写Dockerfile 在项目的根目录下，新建一个文本文件.dockerignore和Dockerfile。前者是docker打包要忽略的路径;后者是docker打包的代码
FROMnode:8.4COPY . /appWORKDIR/appRUN npm install --registry=https://registry.</description>
    </item>
    
    <item>
      <title>git学习笔记</title>
      <link>https://caychance.github.io/posts/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 16 Jan 2019 13:52:57 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>引言 git是14年才接触的，然后也没有系统的学习过。都是平时遇到一点问题，去搜一搜。
安装部分就不说了。
概念  工作区 就是电脑上写代码部分 版本库 Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。  常用命令 初始化  mkdir learngit 新建一个文件夹
cd learngit 并进入该文件夹
git init 初始化，把该文件夹变成git可以管理的仓库（会产生一个.git文件）
git add  把文件修改添加到暂存区（Stage）
git commit -m  把暂存区的所有内容提交到当前分支
 查看状态及回退  git status 查看当前仓库状态
git diff 查看详细的修改内容
git diff HEAD &amp;ndash; readme.txt 查看工作区和版本库里面最新版本的区别
git log 查看从最近到最远的提交日志
git log &amp;ndash;pretty=oneline 查看从最近到最远的简洁版提交日志
git log &amp;ndash;graph 查看分支合并图
git reflog 查看历史命令
git reset &amp;ndash;hard HEAD^ 回退到上一个版本
git reset &amp;ndash;hard HEAD^^ 回退到上上一个版本</description>
    </item>
    
    <item>
      <title>如何使用七牛云</title>
      <link>https://caychance.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91/</link>
      <pubDate>Sat, 05 Jan 2019 23:59:38 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91/</guid>
      <description>最近做了一个需求，使用七牛云的sdk来上传图片。 七牛云的文档写的可以更好一点。
html部分
&amp;lt;input ref=&amp;#39;imageUrl&amp;#39; type=&amp;#34;file&amp;#34; @click=&amp;#34;uploadImage(&amp;#39;imageUrl&amp;#39;)&amp;#34;&amp;gt; 这个用的是vue做的，所以会有一个ref标签，直接用原生html写的可以忽略。
//上传图片 uploadImage(ref) { //选中input元素  let input = undefined; if(ref === &amp;#39;imageUrl&amp;#39;){ input = this.$refs[ref]; } else{ input = this.$refs[ref][0]; } //input在onchange的时候触发  input.onchange = ()=&amp;gt;{ let _this = this; //localFileName 文件的本地名，一般是一个绝对地址的路径  let localFileName = input.value; //文件名  let suffix = localFileName.substring(localFileName.lastIndexOf(&amp;#34;.&amp;#34;),localFileName.length);//后缀名  let fileName = localFileName.substring(localFileName.lastIndexOf(&amp;#34;\\&amp;#34;)+1, let file = input.files[0]; //需要先获取上传七牛云的token  axios.get(`${GET_UPLOAD_TOKEN}?fileName=${fileName}`).then((response)=&amp;gt;{ if(response.code === 2000){ //七牛云token  const token = response.</description>
    </item>
    
    <item>
      <title>markdown</title>
      <link>https://caychance.github.io/posts/markdown/</link>
      <pubDate>Wed, 05 Dec 2018 14:13:45 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/markdown/</guid>
      <description>可直接参考该文章
markdown常用语法 目录  标题 引入代码 外链 引入图片 引用 缩进 斜体 加粗 分割线 待办 目录锚点 引入单句代码  1、标题 井号#后面空一格
# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 2、引入代码
function add(x,y){ return x+y; }  3、外链
[参考链接](https://caychance.github.io/) 参考链接
4、引入图片
![](https://blog-pics.pek3b.qingstor.com/006tNbRwly1fxq7h427d7j30780c7t9o.jpg) 5、引用
&amp;gt;一段引用的话换行了  一段引用的话 换行了
 6、缩进 三种方法
不带缩进的一行&amp;amp;nbsp;不断行的空白格或&amp;amp;#160;&amp;amp;ensp;半方大的空白或&amp;amp;#8194;&amp;amp;emsp;全方大的空白或&amp;amp;#8195; 不带缩进的一行 &amp;nbsp;不断行的空白格或&amp;#160; &amp;ensp;半方大的空白或&amp;#8194; &amp;emsp;全方大的空白或&amp;#8195;
7、斜体 两种方法
_这是斜体_*这是斜体* 这是斜体 这是斜体
8、加粗 两种方法</description>
    </item>
    
    <item>
      <title>github没有记录你的contributions?</title>
      <link>https://caychance.github.io/posts/github%E6%B2%A1%E6%9C%89%E8%AE%B0%E5%BD%95%E4%BD%A0%E7%9A%84contributions/</link>
      <pubDate>Tue, 04 Dec 2018 10:51:31 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/github%E6%B2%A1%E6%9C%89%E8%AE%B0%E5%BD%95%E4%BD%A0%E7%9A%84contributions/</guid>
      <description>github是怎么计算contributions的呢？  贡献的计算 Issues and pull请求 如果issues和pull请求是在独立库中打开而不是分叉（fork），它们将显示在您的贡献图上。
Commits 如果commits符合以下所有的条件，那么会在您的贡献图上有所显示。
 用于提交的电子邮件地址与您的GitHub帐户相关联。 在独立的库中进行提交的，而不是分支（fork）。 提交内容如下：  &amp;emsp;在库的默认分支。（通常是master分支）。
&amp;emsp;在gh-pages分支中（对于具有Project Pages站点的库）。
 参考</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://caychance.github.io/posts/hello-world/</link>
      <pubDate>Mon, 26 Nov 2018 16:17:03 +0000</pubDate>
      
      <guid>https://caychance.github.io/posts/hello-world/</guid>
      <description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post $ hexo new &amp;#34;My New Post&amp;#34; More info: Writing
Run server $ hexo server More info: Server
Generate static files $ hexo generate More info: Generating
Deploy to remote sites $ hexo deploy More info: Deployment</description>
    </item>
    
  </channel>
</rss>